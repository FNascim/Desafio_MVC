// <auto-generated />
using System;
using Desafio_MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Desafio_MVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201113121958_AtualizaVaga_TecnologiaChave")]
    partial class AtualizaVaga_TecnologiaChave
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Desafio_MVC.Models.Funcionario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Cargo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("GftId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Inicio_Wa")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Matricula")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Termino_Wa")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("VagaId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GftId");

                    b.HasIndex("VagaId");

                    b.ToTable("Funcionarios");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Cargo = "Desenvolvedor Java",
                            Inicio_Wa = new DateTime(2020, 11, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Matricula = "456324",
                            Nome = "Marcia",
                            Status = true,
                            Termino_Wa = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            Cargo = "Desenvolvedor .Net",
                            Inicio_Wa = new DateTime(2020, 11, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Matricula = "123456",
                            Nome = "José",
                            Status = true,
                            Termino_Wa = new DateTime(2020, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            Cargo = "Desenvolvedor .Net",
                            Inicio_Wa = new DateTime(2020, 11, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Matricula = "159753",
                            Nome = "João",
                            Status = true,
                            Termino_Wa = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            Cargo = "Desenvolvedor FrontEnd",
                            Inicio_Wa = new DateTime(2020, 11, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Matricula = "564987",
                            Nome = "Maria",
                            Status = true,
                            Termino_Wa = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            Cargo = "Desenvolvedor Backend",
                            Inicio_Wa = new DateTime(2020, 11, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Matricula = "951357",
                            Nome = "Julia",
                            Status = true,
                            Termino_Wa = new DateTime(2020, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Desafio_MVC.Models.Funcionario_Tecnologia", b =>
                {
                    b.Property<long>("Funcionario_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("Tecnologia_Id")
                        .HasColumnType("bigint");

                    b.HasKey("Funcionario_Id", "Tecnologia_Id");

                    b.HasIndex("Tecnologia_Id");

                    b.ToTable("Funcionario_Tecnologias");

                    b.HasData(
                        new
                        {
                            Funcionario_Id = 1L,
                            Tecnologia_Id = 5L
                        },
                        new
                        {
                            Funcionario_Id = 2L,
                            Tecnologia_Id = 1L
                        },
                        new
                        {
                            Funcionario_Id = 3L,
                            Tecnologia_Id = 3L
                        },
                        new
                        {
                            Funcionario_Id = 4L,
                            Tecnologia_Id = 2L
                        },
                        new
                        {
                            Funcionario_Id = 5L,
                            Tecnologia_Id = 4L
                        });
                });

            modelBuilder.Entity("Desafio_MVC.Models.Gft", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Cep")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Endereco")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Gfts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Cep = "99999999",
                            Cidade = "Barueri",
                            Endereco = "Avenida Rio negro",
                            Estado = "SP",
                            Nome = "gft-barueri",
                            Status = true,
                            Telefone = "1199999999"
                        },
                        new
                        {
                            Id = 2L,
                            Cep = "888888888",
                            Cidade = "Curitiba",
                            Endereco = "Avenida 1",
                            Estado = "PR",
                            Nome = "gft-curitiba",
                            Status = true,
                            Telefone = "4188888888"
                        },
                        new
                        {
                            Id = 3L,
                            Cep = "888888811",
                            Cidade = "Sorocaba",
                            Endereco = "Avenida 2",
                            Estado = "SP",
                            Nome = "gft-Sorocaba",
                            Status = true,
                            Telefone = "1188887777"
                        },
                        new
                        {
                            Id = 4L,
                            Cep = "77777777",
                            Cidade = "São Paulo",
                            Endereco = "Avenida 3",
                            Estado = "PR",
                            Nome = "gft-são paulo",
                            Status = true,
                            Telefone = "1177777777"
                        },
                        new
                        {
                            Id = 5L,
                            Cep = "66666666",
                            Cidade = "Manaus",
                            Endereco = "Avenida 4",
                            Estado = "AM",
                            Nome = "gft-manaus",
                            Status = true,
                            Telefone = "9188775566"
                        });
                });

            modelBuilder.Entity("Desafio_MVC.Models.Tecnologia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Tecnologias");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Nome = "Asp.Net",
                            Status = true
                        },
                        new
                        {
                            Id = 2L,
                            Nome = "Java",
                            Status = true
                        },
                        new
                        {
                            Id = 3L,
                            Nome = "Angular",
                            Status = true
                        },
                        new
                        {
                            Id = 4L,
                            Nome = "Python",
                            Status = true
                        },
                        new
                        {
                            Id = 5L,
                            Nome = "JavaScript",
                            Status = true
                        });
                });

            modelBuilder.Entity("Desafio_MVC.Models.Vaga", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Abertura_Vaga")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Codigo_Vaga")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Descricao_Vaga")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Projeto")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Qtd_Vaga")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Vagas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Abertura_Vaga = new DateTime(2020, 11, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Codigo_Vaga = "#Itau9521",
                            Descricao_Vaga = "Desenvolvimento Java",
                            Projeto = "Itau",
                            Qtd_Vaga = 5,
                            Status = true
                        },
                        new
                        {
                            Id = 2L,
                            Abertura_Vaga = new DateTime(2020, 11, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Codigo_Vaga = "#Santander8566",
                            Descricao_Vaga = "Desenvolvimento .Net",
                            Projeto = "Santander",
                            Qtd_Vaga = 1,
                            Status = true
                        },
                        new
                        {
                            Id = 3L,
                            Abertura_Vaga = new DateTime(2020, 11, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Codigo_Vaga = "#Sulamerica4511",
                            Descricao_Vaga = "JavaScript",
                            Projeto = "Sulamerica",
                            Qtd_Vaga = 2,
                            Status = true
                        },
                        new
                        {
                            Id = 4L,
                            Abertura_Vaga = new DateTime(2020, 11, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Codigo_Vaga = "#Itau3546",
                            Descricao_Vaga = "Angular",
                            Projeto = "Itau",
                            Qtd_Vaga = 9,
                            Status = true
                        },
                        new
                        {
                            Id = 5L,
                            Abertura_Vaga = new DateTime(2020, 11, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Codigo_Vaga = "#Original7624",
                            Descricao_Vaga = "Desenvolvimento Java",
                            Projeto = "Original",
                            Qtd_Vaga = 2,
                            Status = true
                        });
                });

            modelBuilder.Entity("Desafio_MVC.Models.Vaga_Tecnologia", b =>
                {
                    b.Property<long>("Vaga_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("Tecnologia_Id")
                        .HasColumnType("bigint");

                    b.HasKey("Vaga_Id", "Tecnologia_Id");

                    b.HasIndex("Tecnologia_Id");

                    b.ToTable("Vaga_Tecnologias");

                    b.HasData(
                        new
                        {
                            Vaga_Id = 1L,
                            Tecnologia_Id = 5L
                        },
                        new
                        {
                            Vaga_Id = 2L,
                            Tecnologia_Id = 1L
                        },
                        new
                        {
                            Vaga_Id = 3L,
                            Tecnologia_Id = 3L
                        },
                        new
                        {
                            Vaga_Id = 4L,
                            Tecnologia_Id = 2L
                        },
                        new
                        {
                            Vaga_Id = 5L,
                            Tecnologia_Id = 4L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Desafio_MVC.Models.Funcionario", b =>
                {
                    b.HasOne("Desafio_MVC.Models.Gft", "Gft")
                        .WithMany("Funcionarios")
                        .HasForeignKey("GftId");

                    b.HasOne("Desafio_MVC.Models.Vaga", "Vaga")
                        .WithMany()
                        .HasForeignKey("VagaId");
                });

            modelBuilder.Entity("Desafio_MVC.Models.Funcionario_Tecnologia", b =>
                {
                    b.HasOne("Desafio_MVC.Models.Funcionario", "Funcionario")
                        .WithMany("Funcionario_Tecnologias")
                        .HasForeignKey("Funcionario_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Desafio_MVC.Models.Tecnologia", "Tecnologia")
                        .WithMany("Funcionario_Tecnologias")
                        .HasForeignKey("Tecnologia_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Desafio_MVC.Models.Vaga_Tecnologia", b =>
                {
                    b.HasOne("Desafio_MVC.Models.Tecnologia", "Tecnologia")
                        .WithMany()
                        .HasForeignKey("Tecnologia_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Desafio_MVC.Models.Vaga", "Vaga")
                        .WithMany("Vaga_Tecnologia")
                        .HasForeignKey("Vaga_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
